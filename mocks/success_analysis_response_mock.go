// Code generated by MockGen. DO NOT EDIT.
// Source: handlers/http/responses/success_analysis_response.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	responses "github.com/naviud/webpage-analyzer/handlers/http/responses"
)

// MockWebPageAnalyzerResponseManager is a mock of WebPageAnalyzerResponseManager interface.
type MockWebPageAnalyzerResponseManager struct {
	ctrl     *gomock.Controller
	recorder *MockWebPageAnalyzerResponseManagerMockRecorder
}

// MockWebPageAnalyzerResponseManagerMockRecorder is the mock recorder for MockWebPageAnalyzerResponseManager.
type MockWebPageAnalyzerResponseManagerMockRecorder struct {
	mock *MockWebPageAnalyzerResponseManager
}

// NewMockWebPageAnalyzerResponseManager creates a new mock instance.
func NewMockWebPageAnalyzerResponseManager(ctrl *gomock.Controller) *MockWebPageAnalyzerResponseManager {
	mock := &MockWebPageAnalyzerResponseManager{ctrl: ctrl}
	mock.recorder = &MockWebPageAnalyzerResponseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebPageAnalyzerResponseManager) EXPECT() *MockWebPageAnalyzerResponseManagerMockRecorder {
	return m.recorder
}

// AddHeadingLevel mocks base method.
func (m *MockWebPageAnalyzerResponseManager) AddHeadingLevel(tag, level string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHeadingLevel", tag, level)
}

// AddHeadingLevel indicates an expected call of AddHeadingLevel.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) AddHeadingLevel(tag, level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHeadingLevel", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).AddHeadingLevel), tag, level)
}

// AddUrlInfo mocks base method.
func (m *MockWebPageAnalyzerResponseManager) AddUrlInfo(url string, urlType, status int, latency int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUrlInfo", url, urlType, status, latency)
}

// AddUrlInfo indicates an expected call of AddUrlInfo.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) AddUrlInfo(url, urlType, status, latency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUrlInfo", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).AddUrlInfo), url, urlType, status, latency)
}

// SetExtractTime mocks base method.
func (m *MockWebPageAnalyzerResponseManager) SetExtractTime(extractTime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtractTime", extractTime)
}

// SetExtractTime indicates an expected call of SetExtractTime.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) SetExtractTime(extractTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtractTime", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).SetExtractTime), extractTime)
}

// SetHasLogin mocks base method.
func (m *MockWebPageAnalyzerResponseManager) SetHasLogin(hasLogin bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHasLogin", hasLogin)
}

// SetHasLogin indicates an expected call of SetHasLogin.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) SetHasLogin(hasLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHasLogin", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).SetHasLogin), hasLogin)
}

// SetHtmlVersion mocks base method.
func (m *MockWebPageAnalyzerResponseManager) SetHtmlVersion(htmlVersion string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHtmlVersion", htmlVersion)
}

// SetHtmlVersion indicates an expected call of SetHtmlVersion.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) SetHtmlVersion(htmlVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHtmlVersion", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).SetHtmlVersion), htmlVersion)
}

// SetServiceTime mocks base method.
func (m *MockWebPageAnalyzerResponseManager) SetServiceTime(serviceTime int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceTime", serviceTime)
}

// SetServiceTime indicates an expected call of SetServiceTime.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) SetServiceTime(serviceTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceTime", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).SetServiceTime), serviceTime)
}

// SetTitle mocks base method.
func (m *MockWebPageAnalyzerResponseManager) SetTitle(title string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTitle", title)
}

// SetTitle indicates an expected call of SetTitle.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) SetTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTitle", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).SetTitle), title)
}

// To mocks base method.
func (m *MockWebPageAnalyzerResponseManager) To() responses.AnalysisSuccessResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "To")
	ret0, _ := ret[0].(responses.AnalysisSuccessResponse)
	return ret0
}

// To indicates an expected call of To.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) To() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "To", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).To))
}

// ToString mocks base method.
func (m *MockWebPageAnalyzerResponseManager) ToString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToString")
	ret0, _ := ret[0].(string)
	return ret0
}

// ToString indicates an expected call of ToString.
func (mr *MockWebPageAnalyzerResponseManagerMockRecorder) ToString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToString", reflect.TypeOf((*MockWebPageAnalyzerResponseManager)(nil).ToString))
}
