// Code generated by MockGen. DO NOT EDIT.
// Source: channels/url_executor.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
	channels "github.com/naviud/webpage-analyzer/channels"
)

// MockUrlExecutor is a mock of UrlExecutor interface.
type MockUrlExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockUrlExecutorMockRecorder
}

// MockUrlExecutorMockRecorder is the mock recorder for MockUrlExecutor.
type MockUrlExecutorMockRecorder struct {
	mock *MockUrlExecutor
}

// NewMockUrlExecutor creates a new mock instance.
func NewMockUrlExecutor(ctrl *gomock.Controller) *MockUrlExecutor {
	mock := &MockUrlExecutor{ctrl: ctrl}
	mock.recorder = &MockUrlExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUrlExecutor) EXPECT() *MockUrlExecutorMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockUrlExecutor) Build(url string, wg *sync.WaitGroup, fn channels.ExecFunc) channels.UrlExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", url, wg, fn)
	ret0, _ := ret[0].(channels.UrlExecutor)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockUrlExecutorMockRecorder) Build(url, wg, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockUrlExecutor)(nil).Build), url, wg, fn)
}

// Create mocks base method.
func (m *MockUrlExecutor) Create() channels.UrlExecutor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(channels.UrlExecutor)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUrlExecutorMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrlExecutor)(nil).Create))
}

// PushChannel mocks base method.
func (m *MockUrlExecutor) PushChannel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PushChannel")
}

// PushChannel indicates an expected call of PushChannel.
func (mr *MockUrlExecutorMockRecorder) PushChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushChannel", reflect.TypeOf((*MockUrlExecutor)(nil).PushChannel))
}
